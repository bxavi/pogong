// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: query.sql

package db

import (
	"context"
)

const createAccounts = `-- name: CreateAccounts :one
INSERT INTO accounts (
	email, password
) VALUES (
	$1, $2
)
RETURNING id, email, password
`

type CreateAccountsParams struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) CreateAccounts(ctx context.Context, arg CreateAccountsParams) (*Account, error) {
	row := q.db.QueryRowContext(ctx, createAccounts, arg.Email, arg.Password)
	var i Account
	err := row.Scan(&i.ID, &i.Email, &i.Password)
	return &i, err
}

const deleteAccounts = `-- name: DeleteAccounts :exec
DELETE FROM accounts
WHERE id = $1
`

func (q *Queries) DeleteAccounts(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAccounts, id)
	return err
}

const getAccounts = `-- name: GetAccounts :one
SELECT id, email, password FROM accounts
WHERE id = $1  LIMIT 1
`

func (q *Queries) GetAccounts(ctx context.Context, id int64) (*Account, error) {
	row := q.db.QueryRowContext(ctx, getAccounts, id)
	var i Account
	err := row.Scan(&i.ID, &i.Email, &i.Password)
	return &i, err
}

const listAccounts = `-- name: ListAccounts :many
SELECT id, email, password FROM accounts
ORDER BY email
`

func (q *Queries) ListAccounts(ctx context.Context) ([]*Account, error) {
	rows, err := q.db.QueryContext(ctx, listAccounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Account{}
	for rows.Next() {
		var i Account
		if err := rows.Scan(&i.ID, &i.Email, &i.Password); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccounts = `-- name: UpdateAccounts :one
UPDATE accounts
set email = $2,
password = $3
WHERE id = $1
RETURNING id, email, password
`

type UpdateAccountsParams struct {
	ID       int64  `json:"id"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) UpdateAccounts(ctx context.Context, arg UpdateAccountsParams) (*Account, error) {
	row := q.db.QueryRowContext(ctx, updateAccounts, arg.ID, arg.Email, arg.Password)
	var i Account
	err := row.Scan(&i.ID, &i.Email, &i.Password)
	return &i, err
}
