// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
	_ "github.com/lib/pq"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO account (
	email, password
) VALUES (
	$1, $2
)
RETURNING id, email, password, created_at
`

type CreateAccountParams struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (*Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount, arg.Email, arg.Password)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
	)
	return &i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM account
WHERE id = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAccount, id)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT id, email, password, created_at FROM account
WHERE id = $1  LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, id int64) (*Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
	)
	return &i, err
}

const getAccountWithEmail = `-- name: GetAccountWithEmail :one

SELECT id, email, password, created_at FROM account
WHERE email = $1
`

// Add queries here:
func (q *Queries) GetAccountWithEmail(ctx context.Context, email string) (*Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountWithEmail, email)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
	)
	return &i, err
}

const listAccount = `-- name: ListAccount :many
SELECT id, email, password, created_at FROM account
ORDER BY id
LIMIT $2
OFFSET $1
`

type ListAccountParams struct {
	Offset sql.NullInt32 `json:"offset"`
	Limit  sql.NullInt32 `json:"limit"`
}

func (q *Queries) ListAccount(ctx context.Context, arg ListAccountParams) ([]*Account, error) {
	rows, err := q.db.QueryContext(ctx, listAccount, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Account{}
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Password,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccount = `-- name: UpdateAccount :one
UPDATE account
set email = $2,
password = $3
WHERE id = $1
RETURNING id, email, password, created_at
`

type UpdateAccountParams struct {
	ID       int64  `json:"id"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (*Account, error) {
	row := q.db.QueryRowContext(ctx, updateAccount, arg.ID, arg.Email, arg.Password)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
	)
	return &i, err
}
